provider "aws" {
  region     = "ap-south-1"
  access_key = "AKIA5FTZDORULHWROZWC"
  secret_key = "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"
}

# Create VPC
resource "aws_vpc" "test_vpc" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "test_vpc"
  }
}

# Create Subnets
resource "aws_subnet" "subnet1" {
  vpc_id                  = "${aws_vpc.test_vpc.id}"
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "ap-south-1a"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "subnet2" {
  vpc_id                  = "${aws_vpc.test_vpc.id}"
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "ap-south-1b"
  map_public_ip_on_launch = true
}

# Create Internet Gateway
resource "aws_internet_gateway" "test_IG" {
  vpc_id = "${aws_vpc.test_vpc.id}"
}

# Create Route Table
resource "aws_route_table" "public_route" {
  vpc_id = "${aws_vpc.test_vpc.id}"

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = "${aws_internet_gateway.test_IG.id}"
  }
}

# Associate Subnets with Route Table
resource "aws_route_table_association" "a" {
  route_table_id = "${aws_route_table.public_route.id}"
  subnet_id      = "${aws_subnet.subnet1.id}"
}

resource "aws_route_table_association" "b" {
  route_table_id = "${aws_route_table.public_route.id}"
  subnet_id      = "${aws_subnet.subnet2.id}"
}

# Create Security Group
resource "aws_security_group" "allow_http_ssh" {
  vpc_id = "${aws_vpc.test_vpc.id}"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create EC2 Instance
resource "aws_instance" "test_instance" {
  ami                    = "ami-0d1e92463a5acf79d"
  instance_type          = "t2.micro"
  subnet_id              = "${aws_subnet.subnet1.id}"
  key_name               = "vpc-key-mumbai"
  security_groups        = [aws_security_group.allow_http_ssh.id]
  associate_public_ip_address = true

  user_data = <<-EOF
              #!/bin/bash
              yum update -y
              yum install -y httpd
              systemctl start httpd
              systemctl enable httpd
              echo "<h1>Hello from Terraform</h1>" > /var/www/html/index.html
              EOF

  tags = {
    Name = "TerraformWebServer"
  }
}

output "instance_public_ip" {
  value = aws_instance.test_instance.public_ip
}
